// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import context "context"
import mock "github.com/stretchr/testify/mock"
import models "github.com/ferjoaguilar/backend-utec-inscriptions/models"

// SignupRepository is an autogenerated mock type for the SignupRepository type
type SignupRepository struct {
	mock.Mock
}

// ChangeStatus provides a mock function with given fields: ctx, id, status
func (_m *SignupRepository) ChangeStatus(ctx context.Context, id string, status string) (string, error) {
	ret := _m.Called(ctx, id, status)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, string, string) string); ok {
		r0 = rf(ctx, id, status)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, id, status)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateSignup provides a mock function with given fields: ctx, signup
func (_m *SignupRepository) CreateSignup(ctx context.Context, signup *models.Signup) (string, error) {
	ret := _m.Called(ctx, signup)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, *models.Signup) string); ok {
		r0 = rf(ctx, signup)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *models.Signup) error); ok {
		r1 = rf(ctx, signup)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSignupById provides a mock function with given fields: ctx, id
func (_m *SignupRepository) GetSignupById(ctx context.Context, id string) (*models.Signup, error) {
	ret := _m.Called(ctx, id)

	var r0 *models.Signup
	if rf, ok := ret.Get(0).(func(context.Context, string) *models.Signup); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Signup)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSignups provides a mock function with given fields: ctx, status
func (_m *SignupRepository) GetSignups(ctx context.Context, status string) ([]models.SignupLookup, error) {
	ret := _m.Called(ctx, status)

	var r0 []models.SignupLookup
	if rf, ok := ret.Get(0).(func(context.Context, string) []models.SignupLookup); ok {
		r0 = rf(ctx, status)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.SignupLookup)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, status)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
